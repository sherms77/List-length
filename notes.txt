ABOUT
# Pg.86 - How to think cs
# ref to /home/sherms/Python files/How to think_exercises/listLength/README_listLength.txt
# ref to /home/sherms/Python files/How to think_exercises/listLength/tests.txt

LINKS
1.020221: append list - https://www.programiz.com/python-programming/methods/list/append
2.040221: https://stackabuse.com/python-get-number-of-elements-in-a-list/
3.080221: https://www.geeksforgeeks.org/python-handling-recursion-limit/ # got recursion error: max recursion depth exceeded when trying nested lists example in link 2.
4.120221: https://www.programiz.com/python-programming/nested-dictionary#:~:text=Key%20Points%20to%20Remember%3A,Nested%20Dictionary%20is%20not%20possible.
5.180221: https://dbader.org/blog/python-nested-unpacking 
6.180221: https://www.geeksforgeeks.org/python-unpacking-nested-tuples/
7.200221: https://docs.python.org/3/tutorial/datastructures.html 

BLOCKERS
running len on the unnested int element of 1 is the problem. len does not work on it in this list format.

STEPS
1.100221: DONE - 080221: Reread sections 8.1-8.4.
2.100221: DONE - 080221: Then try nested lists example from link 2 again. Refer to link 3 for info on recursion error. - 100221: DONE. Resolved recursion error (refer to note 100221).
3.100221: DONE - 100221: If step 2 fails, google other solutions for running len() on unnested integer. 
4.100221: DONE - 110221: NEXT STEP: Do flow of execution for nested lists_test.py to see if I can modify it to solve the problem.
5.100221: DONE - 110221: If step 4 fails, google other solutions to run len() on unnested integer. Refer to notes 100221 for details.
6.100221: DONE - 160221: Write function to run len() on list with only nested intger elements in list.
7.150221: DONE - Step 4 failed. Write out exitisting code from list_length MAIN.py and analyse. Reassess unpacking and repacking option. Looking for a solution to repack the unnested integer as nested item in a new list so len() can be run on it.
8.180221: Write/workout logic required to make list_length MAIN.py work. Ie: repacking unnested integers.
9.180221: Read link 5.

NOTES
230221: Reading link 5. Upto #1 – Unpacking and the “=” Assignment Operator.
230221: As per note on 220221, the challenge is repacking the elements in anothe list as a nested element. Trying to get the list name to iterate and be a new one each time.
220221: Still working on new-list-prod. Prob with repacking. Having trouble getting unpacked elements to be repacked as nested elements in a new list.
200221: Still working on new-list-prod. Problem with repacking list. Refer to links 5 and 7.
190221: Refer to new-list-prod.py. Trying to get unpacked elements saved in its own list.
190221: Logic: Trying to repack each unpacked element in its own list, so it can be added to another list as a nested element which will allow len() to be run on each nested element in the new repacked list.
180221: STILL WORKING ON STEP 8 AND 9. Refer to new-list-prod.py.
180221: WORKING ON STEP 8 and 9. REFER TO unpack-repack-test.py. Finished step 7.
180221: To get elements to be repacked as nested elements in a new list, you have to store each element in its own list and then add to a new list.
180221: To put unpacked elements in its own list it will require a loop to create a new list for each element.
180221: List comprehension might be a cleaner solution but will do the long way first to understand operation.
170221: UPTO STEP 7. Finished step 6.
160221: Step 6 is now 7. WORKING ON STEP 6.
160221: Added an extra step. Decided to write a function so that it works with a list with nested interger elemtents. Will see how that works first.
150221: UPTO STEP 6. - LOOK UP HOW TO REPACK AS NESTED ELEMENTS. ALSO, WRITE OUT EXISTING CODE AND ANALYSE.
150221: The list is being repacked in the same way. Ie: unnested elements remain unnested in the new list.
150221: Went back to list_length MAIN.py and debugged it to see how the list was being unpacked and repacked.
150221: Could not see a way to use the code in nested lists_test.py to solve the problem.
130221: STILL WORKING ON STEP 4 - FINISHED FLOW OF EXECUTION IN STEP 4. NOW ASSESSING IF I CAN USE TO SOLVE PROBLEM.
130221: Might need to explore other avenues if I cannot modify code in nested lists.py to solve problem.
130221: How isinstance works (nested lists_test.py): 
    1.Checks an object's data type. Eg: isinstance("hey", str). Out: True. It returns a boolean.
    2.The second argument can be a tuple. Eg: isinstance(["hey"], (str, int, list)) Out: True. One of the arguments in the tuple makes the first argument true.

130221: STILL WORKING ON STEP 4.
120221: Trying to resolve nested dictionary error to test else statement. This relates to step 4. Refer to link 4. 130221: RESOLVED.
110221: WORKING ON STEP 4.
110221: UPDATE FILES SECTION IN README. - 120221: DONE
110221: I could possibly use the code from nested lists_test.py to solve the problem.
110221: Can I modify the code the achieve the desired result?
100221: Can I use the code from the nested lists_test.py to solve problem? 
        Answer to above: NO - the code in nested lists_test.py does not use len and it gives the total len of all elements (as an aggregate). The probelm requires you to use len and to print the length of each element in isolation of eachother, not as an aggregate.
100221: Resolved recursion error for nested list code from link 2. My indentation was incorrect. Refer to nested lists_test.py and nested lists_test(2).py.
080221: Tried to resolve recursion error using info in link 3. Got os error.
080221: Tried nested lists example from link 2. Did not work.
080221: Refer to nested lists_test.py.

FAILED CODE

--Date: 130221-->
# This format does not work. The nested dictionary need a key value.
# This relates to testing the else statement in nested list_test.py.
think = {1:'hello', 2: 'goodbye', 3: 'hi', 4: 'bye', {a: 'bonjour', b: 'konichiwa', c: 'aloha'}} 

--Date: 080221-->

# tried this to try and resolve recursion error.
# did not work.
# got internal os error.

import sys
list_f = [30, 0.9, [8, 56, 22, ["a", "b"]], [200, 3, [5, [89], 10]]]

# print(list_f)

sys.setrecursionlimit(10**6) # got internal os error.

def get_elements_of_nested_list(element):
    count = 0
    if isinstance(element, list):
        for each_element in element:
            count += get_elements_of_nested_list(element)
        else:
            count += 1
        return count

print("Total number of elements in the nested list: ", get_elements_of_nested_list(list_f))

# example from link 2.
# refer to line 27

list_f = [30, 0.9, [8, 56, 22, ["a", "b"]], [200, 3, [5, [89], 10]]]

# print(list_f)

sys.setrecursionlimit(10**6)

def get_elements_of_nested_list(element):
    count = 0
    if isinstance(element, list):
        for each_element in element:
            count += get_elements_of_nested_list(element) # changed this from (each_element) to (element) - got recursion error.
        else:
            count += 1
        return count

print("Total number of elements in the nested list: ", get_elements_of_nested_list(list_f))


--Date: 040221-->
# tried this from link 2 to test if list comprehension will work.
# got error: TypeError: object of type 'int' has no len()

think = ['spam!', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2 ,3, 4]]
>>> num = sum([len(element) for element in think])

--Date: 040221-->
think = ['spam!', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2 ,3, 4]]

def unpack_list(l):
    y = int(len(l)) # upper range limit
    index = 0
    new = []
    j = []
    for i in range(y):
        # print(l[i]) # prints each element from the list.
        new.append(l[i]) 
        index += # does now work as intended. It adds the think list to j four times.         
        j.append(new)
        
    # print(new, '- This is the new list.')
    print('APPENDED NEW LIST TO j ', j)
    
    # 030221: UPTO HERE
    # print(len(j[i])) # this didn't work. need to run len function on it and count nested elements.

unpack_list(think)

--Date: 030221-->
think = ['spam!', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2 ,3, 4]]
e = ['spam!', ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2 ,3]] # list without standalone int 1

def unpack_list(l):
    y = int(len(l)) # upper range limit
    index = 0
    new = []
    j = []
    for i in range(y):
        # print(l[i]) # prints each element from the list.
        new.append(l[i]) # works but doesn't nest all the elements. Elements 0 and 1 are still unnested in new list.
        index +=1
        j.append(new)
        
    # print(new, '- This is the new list.')
    print('APPENDED NEW LIST TO j ', j)
    print(len(j[i]))

unpack_list(think)

--Date: Jan 2021-->
num_elements = len(set(l)) # 030121: TypeError: unhashable type: list. looks like you can't use set function on nested lists.
    
# this function does not work for lilst (l) bc of un-nested int element (1) in list
# unpack the list first and convert it to a string?
# 030121: maybe use set function
# https://stackabuse.com/python-get-number-of-elements-in-a-list/

def listLength2():
    i = 0
    while i < len(l):
        x = len(l[i])
        print('The length of element:', [i], ' is:', (x))
        i +=1

listLength2()       
# listLength()

# print(len(e[0]))
# print(len(e[2]))

'''
# this prints lenght of each element in the list
def listLength():
    i = 0
    while i < len(e):
        x = len(e[i])
        print('The length of element:', [i], ' is:', (x))
        i +=1
'''

# print(len(l)) # length of whole list
# print(len(l[1])) # length of nested list [1] - error: int has no len.
# print(len(str(l[1]))) # provides correct output for list [1]
# print(len(l[2])) # length of nested list [2]
# print(len(l[3])) # len of third element
# print(len(str(l[3]))) # incorrect output for list [3] - output = 12?
# print(len(l[2]))
